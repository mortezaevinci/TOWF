clc
clear all

%%
%formulation



%%
%actual data

%a.*q+b=realq
B=[.1 .2 .05 -.1 .3 .15]'+rand(6,1)*.1;
A=[.09 .1 .05 .12 .07 .1]'+rand(6,1).*.02;

%generate stochastic data in
for ii=1:100
Q{ii}=rand(6,1);
q{ii}=(Q{ii}-B)./A+rand(6,1).*1;
DXDQ{ii}=Jacob_fun(1,q{ii},A,B);
end


%%
%estimation

x0=[[.1 .1 .1 .1 .1 .1]' [.5 .5 .5 .5 .5 .5]'];

opt = struct(...
    'Algorithm','trust-region-reflective',...
    'DerivativeCheck','off',...
    'Diagnostics','off',...
    'DiffMaxChange',1e-1,...
    'DiffMinChange',1e-17,...
    'Display','final',...
    'FunValCheck','off',...
    'Jacobian','off',...
    'JacobMult',[],... 
    'JacobPattern','sparse(ones(Jrows,Jcols))',...
    'LargeScale','on',...
    'LevenbergMarquardt','on',...
    'LineSearchType','quadcubic',...
    'MaxFunEvals',[],...
    'MaxIter',400,...
    'MaxPCGIter','max(1,floor(numberOfVariables/2))',...
    'OutputFcn',[],...
    'PlotFcns',[],...
    'PrecondBandWidth',Inf,...
    'ScaleProblem','none',...
    'TolFun',1e-7,...
    'TolPCG',0.1,...
    'TolX',1e-7,...
    'TypicalX','ones(numberOfVariables,1)');


[x,resnorm,~,exitflag,output]=lsqcurvefit(@(x,xdata)Jacob_wrapper(x,xdata,numel(Q{1})),x0,[ones(1,size(cell2mat(q),2)) ;cell2mat(q)],cell2mat(DXDQ),[],[],opt)

[x(:,1)-A x(:,2)-B]
